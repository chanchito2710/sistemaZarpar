# ü§ñ INSTRUCCIONES PARA EL AGENTE IA - SISTEMA ZARPAR

> **‚ö†Ô∏è LEER OBLIGATORIAMENTE AL INICIO DE CADA CONVERSACI√ìN**

---

## üì¶ INSTALACI√ìN DESDE CERO (Para Nueva M√°quina)

### üéØ OBJETIVO
Levantar el proyecto completo en una m√°quina nueva desde el repositorio de GitHub, incluyendo Docker, MySQL, frontend y backend.

---

### ‚úÖ PREREQUISITOS

#### 1. Sistema Operativo
- **Windows 10/11** (64-bit)
- **macOS** (Intel o Apple Silicon)
- **Linux** (Ubuntu 20.04+ o similar)

#### 2. Software a Instalar
- Node.js 18.x o superior
- Docker Desktop
- Git
- Editor de c√≥digo (VS Code recomendado)

---

### üöÄ PASO A PASO: INSTALACI√ìN COMPLETA

#### **PASO 1: Instalar Node.js**

##### Windows:
1. Ir a: https://nodejs.org/
2. Descargar el instalador LTS (Long Term Support)
3. Ejecutar el instalador y seguir los pasos
4. Verificar instalaci√≥n:
   ```bash
   node --version    # Debe mostrar v18.x.x o superior
   npm --version     # Debe mostrar 9.x.x o superior
   ```

##### macOS:
```bash
# Usando Homebrew (recomendado)
brew install node@18

# Verificar
node --version
npm --version
```

##### Linux (Ubuntu/Debian):
```bash
# Instalar Node.js 18
curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
sudo apt-get install -y nodejs

# Verificar
node --version
npm --version
```

---

#### **PASO 2: Instalar Docker Desktop**

##### Windows:
1. **Requisitos previos:**
   - Windows 10/11 Pro, Enterprise, o Education (con Hyper-V)
   - O Windows 10/11 Home (con WSL 2)
   - Virtualizaci√≥n habilitada en BIOS

2. **Descargar Docker Desktop:**
   - Ir a: https://www.docker.com/products/docker-desktop/
   - Descargar "Docker Desktop for Windows"
   - Ejecutar el instalador `Docker Desktop Installer.exe`

3. **Configuraci√≥n inicial:**
   - Durante la instalaci√≥n, marcar "Use WSL 2 instead of Hyper-V"
   - Reiniciar la computadora cuando se solicite

4. **Iniciar Docker Desktop:**
   - Abrir "Docker Desktop" desde el men√∫ inicio
   - Esperar a que el √≠cono en la barra de tareas muestre "Docker Desktop is running"
   - Aceptar los t√©rminos de servicio

5. **Verificar instalaci√≥n:**
   ```bash
   docker --version          # Debe mostrar Docker version 24.x.x
   docker compose version    # Debe mostrar Docker Compose version v2.x.x
   ```

##### macOS:
1. **Descargar Docker Desktop:**
   - Ir a: https://www.docker.com/products/docker-desktop/
   - Descargar "Docker Desktop for Mac" (Intel o Apple Silicon seg√∫n tu Mac)

2. **Instalar:**
   - Abrir el archivo `.dmg` descargado
   - Arrastrar Docker a la carpeta Aplicaciones
   - Abrir Docker desde Aplicaciones
   - Dar permisos de administrador cuando se solicite

3. **Verificar:**
   ```bash
   docker --version
   docker compose version
   ```

##### Linux (Ubuntu):
```bash
# Actualizar paquetes
sudo apt-get update

# Instalar dependencias
sudo apt-get install -y \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

# Agregar clave GPG oficial de Docker
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

# Configurar repositorio
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# Instalar Docker Engine
sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

# Agregar usuario al grupo docker (para usar sin sudo)
sudo usermod -aG docker $USER

# Reiniciar sesi√≥n o ejecutar:
newgrp docker

# Verificar
docker --version
docker compose version
```

---

#### **PASO 3: Instalar Git**

##### Windows:
1. Descargar desde: https://git-scm.com/download/win
2. Ejecutar el instalador
3. Configuraci√≥n recomendada durante instalaci√≥n:
   - Editor: VS Code (o el que prefieras)
   - PATH: "Git from the command line and also from 3rd-party software"
   - Line endings: "Checkout Windows-style, commit Unix-style"

4. Verificar:
   ```bash
   git --version
   ```

##### macOS:
```bash
# Git suele venir preinstalado, si no:
brew install git

# Verificar
git --version
```

##### Linux:
```bash
sudo apt-get install git

# Verificar
git --version
```

---

#### **PASO 4: Clonar el Repositorio**

```bash
# Navegar a la carpeta donde quieres el proyecto
cd ~/Desktop  # O la ruta que prefieras

# Clonar el repositorio (reemplaza con tu URL de GitHub)
git clone https://github.com/TU_USUARIO/sistema-zarpar.git

# Entrar al directorio
cd sistema-zarpar

# Verificar que tienes todos los archivos
ls -la  # En Windows: dir
```

---

#### **PASO 5: Configurar Variables de Entorno**

```bash
# Crear archivo .env en la ra√≠z del proyecto
# En Windows PowerShell:
New-Item .env -ItemType File

# En macOS/Linux:
touch .env
```

**Contenido del archivo `.env`:**
```env
# Base de Datos (MySQL en Docker)
DB_HOST=localhost
DB_PORT=3307
DB_USER=root
DB_PASSWORD=zarpar2025
DB_NAME=zarparDataBase

# Backend
PORT=3456

# JWT Secret (para autenticaci√≥n)
JWT_SECRET=tu_secreto_super_seguro_cambialo_en_produccion_zarpar2025

# Frontend (Vite)
VITE_API_URL=http://localhost:3456/api
```

**‚ö†Ô∏è IMPORTANTE:** Cambia `JWT_SECRET` por una cadena aleatoria segura en producci√≥n.

---

#### **PASO 6: Levantar MySQL con Docker**

```bash
# Asegurarse de que Docker Desktop est√° corriendo
docker ps  # Debe responder sin errores

# Crear y levantar el contenedor de MySQL
docker run -d \
  --name zarpar-mysql \
  -e MYSQL_ROOT_PASSWORD=zarpar2025 \
  -e MYSQL_DATABASE=zarparDataBase \
  -p 3307:3306 \
  --restart unless-stopped \
  mysql:8.0

# Verificar que el contenedor est√° corriendo
docker ps | grep zarpar-mysql

# Ver logs del contenedor (opcional)
docker logs zarpar-mysql
```

**En Windows PowerShell, el comando es:**
```powershell
docker run -d `
  --name zarpar-mysql `
  -e MYSQL_ROOT_PASSWORD=zarpar2025 `
  -e MYSQL_DATABASE=zarparDataBase `
  -p 3307:3306 `
  --restart unless-stopped `
  mysql:8.0
```

**Esperar 20-30 segundos** para que MySQL termine de inicializarse.

---

#### **PASO 7: Restaurar la Base de Datos**

```bash
# Importar el backup completo a la base de datos
docker exec -i zarpar-mysql mysql -u root -pzarpar2025 < database/backup_completo.sql

# Verificar que se import√≥ correctamente
docker exec -i zarpar-mysql mysql -u root -pzarpar2025 -e "USE zarparDataBase; SHOW TABLES;"
```

**Deber√≠as ver tablas como:**
- `categorias_productos`
- `clientes_maldonado`
- `clientes_pando`
- `clientes_rivera`
- `productos`
- `productos_sucursal`
- `vendedores`
- ... y m√°s

---

#### **PASO 8: Instalar Dependencias del Proyecto**

```bash
# Instalar todas las dependencias de Node.js
npm install

# Esto instalar√°:
# - Dependencias del frontend (React, Vite, Ant Design, etc.)
# - Dependencias del backend (Express, MySQL2, JWT, etc.)
# - Herramientas de desarrollo (TypeScript, ESLint, etc.)
```

**‚è±Ô∏è Este paso puede tardar 2-5 minutos** dependiendo de tu conexi√≥n a internet.

---

#### **PASO 9: Levantar el Proyecto**

##### Opci√≥n A: Usando el script autom√°tico (Windows)

```bash
# Ejecutar el archivo START.bat
./START.bat
```

Este script levanta autom√°ticamente:
- Frontend en puerto `5678`
- Backend en puerto `3456`

##### Opci√≥n B: Manual (Para ver logs separados)

**Terminal 1 - Backend:**
```bash
npm run dev:api
```

**Terminal 2 - Frontend:**
```bash
npm run dev
```

##### Opci√≥n C: Usando PowerShell Scripts (Windows)

```powershell
# Backend
./start-backend.ps1

# Frontend (en otra terminal)
./start-frontend.ps1
```

---

#### **PASO 10: Verificar que Todo Funciona**

1. **Frontend:** Abrir navegador en http://localhost:5678
   - Deber√≠as ver la p√°gina de login del Sistema Zarpar

2. **Backend:** Verificar en http://localhost:3456/api
   - Deber√≠as ver un mensaje JSON

3. **Base de Datos:** Verificar conexi√≥n
   ```bash
   docker exec -i zarpar-mysql mysql -u root -pzarpar2025 -e "SELECT COUNT(*) as total_vendedores FROM zarparDataBase.vendedores;"
   ```

---

#### **PASO 11: Iniciar Sesi√≥n**

**Credenciales disponibles:**

| Usuario | Email | Contrase√±a | Permisos |
|---------|-------|------------|----------|
| **Administrador** | admin@zarparuy.com | admin123 | ‚úÖ Acceso total a todas las sucursales |
| Pando | pando@zarparuy.com | pando123 | ‚ùå Solo sucursal Pando |
| Maldonado | maldonado@zarparuy.com | maldonado123 | ‚ùå Solo sucursal Maldonado |
| Rivera | rivera@zarparuy.com | rivera123 | ‚ùå Solo sucursal Rivera |
| Melo | melo@zarparuy.com | melo123 | ‚ùå Solo sucursal Melo |
| Paysand√∫ | paysandu@zarparuy.com | paysandu123 | ‚ùå Solo sucursal Paysand√∫ |
| Salto | salto@zarparuy.com | salto123 | ‚ùå Solo sucursal Salto |
| Tacuaremb√≥ | tacuarembo@zarparuy.com | tacuarembo123 | ‚ùå Solo sucursal Tacuaremb√≥ |

**Recomendaci√≥n:** Usa `admin@zarparuy.com` / `admin123` para tener acceso completo.

---

### üîß SOLUCI√ìN DE PROBLEMAS COMUNES

#### ‚ùå Error: "Docker daemon is not running"
**Soluci√≥n:**
- Abrir Docker Desktop manualmente
- Esperar a que el √≠cono muestre "Docker Desktop is running"
- Reintentar el comando

#### ‚ùå Error: "Port 3307 is already in use"
**Soluci√≥n:**
```bash
# Ver qu√© proceso usa el puerto
# Windows:
netstat -ano | findstr :3307

# macOS/Linux:
lsof -i :3307

# Opci√≥n 1: Detener el otro contenedor
docker stop $(docker ps -q --filter "publish=3307")

# Opci√≥n 2: Usar otro puerto (cambiar en .env y docker run)
```

#### ‚ùå Error: "Cannot connect to MySQL"
**Soluci√≥n:**
```bash
# Verificar que el contenedor est√° corriendo
docker ps | grep zarpar-mysql

# Ver logs para errores
docker logs zarpar-mysql

# Reiniciar contenedor
docker restart zarpar-mysql

# Esperar 30 segundos y reintentar
```

#### ‚ùå Error: "Module not found" o errores de TypeScript
**Soluci√≥n:**
```bash
# Limpiar cache y reinstalar
rm -rf node_modules package-lock.json
npm install

# En Windows:
Remove-Item -Recurse -Force node_modules, package-lock.json
npm install
```

#### ‚ùå Error: "EACCES: permission denied" (Linux/macOS)
**Soluci√≥n:**
```bash
# Cambiar permisos del directorio
sudo chown -R $USER:$USER .

# O usar npm con usuario actual
npm config set prefix ~/.npm-global
export PATH=~/.npm-global/bin:$PATH
```

---

### üìã CHECKLIST DE VERIFICACI√ìN

Antes de considerar que el proyecto est√° completamente instalado:

```
[ ] Node.js instalado (v18+)
[ ] Docker Desktop instalado y corriendo
[ ] Git instalado
[ ] Repositorio clonado
[ ] Archivo .env creado con las variables correctas
[ ] Contenedor MySQL corriendo (docker ps muestra zarpar-mysql)
[ ] Base de datos importada (SHOW TABLES muestra tablas)
[ ] Dependencias instaladas (node_modules existe)
[ ] Backend corriendo en http://localhost:3456
[ ] Frontend corriendo en http://localhost:5678
[ ] Login funciona con admin@zarparuy.com / admin123
[ ] Puedes navegar por el sistema sin errores
```

---

### üéì COMANDOS √öTILES DE MANTENIMIENTO

#### Reiniciar todo el sistema
```bash
# Detener todo
docker stop zarpar-mysql
# Matar procesos de Node (Ctrl+C en las terminales)

# Iniciar todo de nuevo
docker start zarpar-mysql
npm run dev
```

#### Ver logs del backend
```bash
# Los logs se muestran en la terminal donde ejecutaste npm run dev:api
```

#### Ver logs de MySQL
```bash
docker logs zarpar-mysql
docker logs -f zarpar-mysql  # Seguir logs en tiempo real
```

#### Hacer backup de la base de datos
```bash
docker exec zarpar-mysql mysqldump -u root -pzarpar2025 zarparDataBase > backup_$(date +%Y%m%d).sql
```

#### Restaurar un backup
```bash
docker exec -i zarpar-mysql mysql -u root -pzarpar2025 zarparDataBase < backup_20251029.sql
```

#### Actualizar el proyecto desde GitHub
```bash
git pull origin main
npm install  # Por si hay nuevas dependencias
```

---

### üåê URLS DEL SISTEMA

| Servicio | URL | Descripci√≥n |
|----------|-----|-------------|
| **Frontend** | http://localhost:5678 | Interfaz de usuario principal |
| **Login** | http://localhost:5678/login | P√°gina de inicio de sesi√≥n |
| **Dashboard** | http://localhost:5678/dashboard | Panel principal |
| **POS** | http://localhost:5678/pos | Punto de Venta |
| **Productos** | http://localhost:5678/products | Gesti√≥n de productos |
| **Admin DB** | http://localhost:5678/admin/database | Administrador de base de datos |
| **Backend API** | http://localhost:3456/api | API REST del backend |
| **MySQL** | localhost:3307 | Base de datos (usar MySQL Workbench o similar) |

---

### üìö DOCUMENTACI√ìN ADICIONAL

Archivos de documentaci√≥n incluidos en el proyecto:

- `CONTEXTO_AGENTE.md` ‚Üí **Este archivo** - Contexto completo para el agente IA
- `COMO_FUNCIONA_PRODUCTOS_EXPLICACION_VISUAL.md` ‚Üí C√≥mo funciona el sistema de productos
- `ANALISIS_ESTRUCTURA_PRODUCTOS_Y_STOCK.md` ‚Üí An√°lisis de la base de datos
- `README.md` ‚Üí Documentaci√≥n general del proyecto

---

## üéØ REGLA #1: BASE DE DATOS - NUNCA CAMBIAR

### üê≥ MySQL con Docker

**IMPORTANTE:** Este proyecto usa **Docker** para MySQL.

#### Informaci√≥n del Contenedor:
```
Nombre del contenedor: zarpar-mysql
Imagen: mysql:8.0
Puerto expuesto: 3307 (host) ‚Üí 3306 (contenedor)
```

#### Verificar que Docker est√° corriendo:
```bash
# Ver contenedores activos
docker ps

# Deber√≠as ver algo como:
# CONTAINER ID   IMAGE        PORTS                    NAMES
# fd8027103378   mysql:8.0    3307:3306/tcp           zarpar-mysql
```

#### Si el contenedor NO est√° corriendo:
```bash
# Iniciar el contenedor
docker start zarpar-mysql

# O iniciarlo y ver logs
docker start zarpar-mysql && docker logs -f zarpar-mysql
```

### Conexi√≥n MySQL
```env
DB_HOST=localhost
DB_PORT=3307
DB_USER=root
DB_PASSWORD=zarpar2025
DB_NAME=zarparDataBase
```

### Comandos para Levantar el Proyecto
```bash
# 1. PRIMERO: Aseg√∫rate de que Docker Desktop est√° corriendo
# 2. SEGUNDO: Verifica que el contenedor zarpar-mysql est√° activo (docker ps)
# 3. TERCERO: Inicia el proyecto

npm run dev

# Frontend: http://localhost:5678
# Backend: http://localhost:3456
# MySQL: localhost:3307 (Docker)
```

### üîß Comandos √∫tiles de Docker para MySQL

```bash
# Ver logs del contenedor MySQL
docker logs zarpar-mysql

# Acceder a MySQL desde terminal (dentro del contenedor)
docker exec -it zarpar-mysql mysql -u root -pzarpar2025

# Ver el estado del contenedor
docker ps -a | grep zarpar-mysql

# Reiniciar el contenedor (si hay problemas)
docker restart zarpar-mysql

# Ejecutar SQL desde archivo
docker exec -i zarpar-mysql mysql -u root -pzarpar2025 zarparDataBase < archivo.sql
```

### ‚ö†Ô∏è NUNCA, BAJO NINGUNA CIRCUNSTANCIA:
- ‚ùå Cambiar el puerto `5678` del frontend
- ‚ùå Cambiar el puerto `3456` del backend
- ‚ùå Cambiar el puerto `3307` de MySQL (Docker)
- ‚ùå Modificar las credenciales de la base de datos
- ‚ùå Crear una nueva base de datos
- ‚ùå Cambiar el nombre `zarparDataBase`
- ‚ùå Detener o eliminar el contenedor `zarpar-mysql` sin backup
- ‚ùå Cambiar el nombre del contenedor Docker

---

## üîç REGLA #2: ANTES DE HACER CUALQUIER CAMBIO

### Proceso OBLIGATORIO:

1. **LEER** todos los archivos relacionados
2. **REVISAR** todas las funciones que usan la base de datos
3. **IDENTIFICAR** qu√© componentes se ver√°n afectados
4. **VERIFICAR** que no romper√°s nada existente
5. **PLANIFICAR** el cambio sin afectar c√≥digo funcional
6. **APLICAR** el cambio
7. **PROBAR** que todo sigue funcionando
8. **VERIFICAR** linter errors

### Archivos Cr√≠ticos a Revisar SIEMPRE:
```
api/config/database.ts          # Configuraci√≥n DB
api/controllers/*                # Todos los controladores
api/routes/*                     # Todas las rutas
src/services/api.ts             # Servicios de frontend
src/pages/admin/DatabaseManager.tsx  # Admin de BD
```

### Si Algo se Rompe:
1. **DETENTE** inmediatamente
2. **REVIERTE** el cambio
3. **ANALIZA** el problema
4. **PROP√ìN** una soluci√≥n alternativa al usuario
5. **ESPERA** aprobaci√≥n antes de continuar

---

## üåç REGLA #3: TODO EN ESPA√ëOL

### Aplicar en:
- ‚úÖ Comentarios de c√≥digo
- ‚úÖ Nombres de variables (cuando sea l√≥gico)
- ‚úÖ Nombres de funciones descriptivas
- ‚úÖ Mensajes de error y √©xito
- ‚úÖ Documentaci√≥n
- ‚úÖ Interfaces de usuario
- ‚úÖ Logs de consola
- ‚úÖ Respuestas al usuario

### Ejemplo de C√≥digo:
```typescript
// ‚úÖ CORRECTO
const cargarClientes = async () => {
  try {
    const respuesta = await obtenerClientesPorSucursal(sucursal);
    mensaje.success('Clientes cargados exitosamente');
  } catch (error) {
    mensaje.error('Error al cargar los clientes');
  }
};

// ‚ùå INCORRECTO (mezclar idiomas)
const loadClientes = async () => {
  const response = await getClientesPorSucursal(branch);
}
```

---

## üë®‚Äçüéì REGLA #4: EL USUARIO ES PRINCIPIANTE

### Tratar al Usuario Como:
- üéì Estudiante que est√° aprendiendo
- üÜï Principiante en programaci√≥n
- üìö Alguien que quiere entender el "por qu√©"

### SIEMPRE Hacer:
1. **EXPLICAR** cada cambio que hagas
2. **ENSE√ëAR** el concepto detr√°s del c√≥digo
3. **SIMPLIFICAR** t√©rminos t√©cnicos
4. **USAR** analog√≠as del mundo real
5. **SUGERIR** mejoras y buenas pr√°cticas
6. **ANTICIPAR** problemas futuros
7. **DOCUMENTAR** con comentarios claros

### Ejemplo de Respuesta:
```
‚ùå MAL: "Agregu√© un useEffect con dependencies array"

‚úÖ BIEN: 
"Agregu√© un useEffect (una funci√≥n que se ejecuta autom√°ticamente 
cuando carga el componente). Esto es como tener un ayudante que 
siempre verifica si algo cambi√≥ y actualiza la informaci√≥n. 
En este caso, cada vez que cambies de sucursal, autom√°ticamente 
traer√° los clientes de esa sucursal."
```

### Actuar Como:
- üí° **Ingeniero Senior** que revisa y optimiza el c√≥digo
- üéØ **Mentor** que ense√±a y explica
- üîç **QA Tester** que encuentra posibles problemas
- üèóÔ∏è **Arquitecto** que sugiere mejores soluciones

---

## üè¢ REGLA #5: SISTEMA DE SUCURSALES Y ROLES

### üëë USUARIO ADMINISTRADOR (ACCESO TOTAL)

**‚≠ê √öNICO USUARIO CON ACCESO A TODO:**

| Rol              | Email                | Acceso                           | Sucursal      |
|------------------|----------------------|----------------------------------|---------------|
| **Administrador**| admin@zarparuy.com   | TODAS las tablas de clientes     | Administracion|
|                  |                      | TODAS las sucursales             |               |
|                  |                      | Vendedores de todas las sucursales|              |

**Caracter√≠sticas del Admin:**
- ‚úÖ Puede ver `clientes_pando`, `clientes_maldonado`, `clientes_rivera`, etc. (TODAS)
- ‚úÖ Puede gestionar vendedores de cualquier sucursal
- ‚úÖ Tiene permisos de lectura/escritura en toda la base de datos
- ‚úÖ Puede generar reportes consolidados de todas las sucursales
- ‚úÖ Es el √öNICO usuario con estos privilegios
- ‚úÖ Est√° en la tabla `vendedores` con cargo "Administrador" o "Director General"
- ‚úÖ **PRODUCTOS**: Puede crear, editar, actualizar stock y precios en `/products`
- ‚úÖ **PRODUCTOS**: Ve botones de acciones (editar, actualizar stock/precio)

### ‚ö†Ô∏è IMPORTANTE: "ADMINISTRADOR" NO ES UNA SUCURSAL

**üö® REGLA CR√çTICA:**

| Concepto | Descripci√≥n | Uso |
|----------|-------------|-----|
| **"Administrador"** | Es un ROL, NO una sucursal f√≠sica | ‚ùå NO usar en selectores de sucursales |
| | Es el puesto del gerente general | ‚ùå NO tiene tabla de clientes |
| | Tiene acceso a TODAS las sucursales | ‚úÖ Puede seleccionar cualquier sucursal real |
| | Email: admin@zarparuy.com | ‚úÖ Se identifica por email, no por sucursal |

**En c√≥digo, SIEMPRE:**
```typescript
// ‚ùå MAL - Tratar "Administrador" como sucursal
const sucursales = ['Pando', 'Maldonado', 'Administrador'];

// ‚úÖ BIEN - Filtrar "Administrador" de las sucursales
const sucursales = ['Pando', 'Maldonado', 'Rivera', ...].filter(
  s => s.toLowerCase() !== 'administrador'
);

// ‚úÖ BIEN - Identificar admin por email, no por sucursal
if (usuario.email === 'admin@zarparuy.com') {
  // Dar acceso a todas las sucursales
}
```

**Cuando listar sucursales:**
- ‚ùå NO incluir "Administrador", "Administracion", "Admin"
- ‚úÖ SOLO listar sucursales f√≠sicas: Pando, Maldonado, Rivera, Melo, Paysand√∫, Salto, Tacuaremb√≥
- ‚úÖ El admin puede SELECCIONAR entre estas sucursales, pero su rol no es una de ellas

### üë• USUARIOS POR SUCURSAL (ACCESO LIMITADO)

**7 Sucursales con acceso restringido:**

| Sucursal    | Email                    | Tabla de Clientes       | Acceso                    |
|-------------|--------------------------|-------------------------|---------------------------|
| Pando       | pando@zarparuy.com       | clientes_pando          | SOLO Pando                |
| Maldonado   | maldonado@zarparuy.com   | clientes_maldonado      | SOLO Maldonado            |
| Rivera      | rivera@zarparuy.com      | clientes_rivera         | SOLO Rivera               |
| Melo        | melo@zarparuy.com        | clientes_melo           | SOLO Melo                 |
| Paysand√∫    | paysandu@zarparuy.com    | clientes_paysandu       | SOLO Paysand√∫             |
| Salto       | salto@zarparuy.com       | clientes_salto          | SOLO Salto                |
| Tacuaremb√≥  | tacuarembo@zarparuy.com  | clientes_tacuarembo     | SOLO Tacuaremb√≥           |

**Restricciones de Usuarios de Sucursal:**
- ‚ùå **PRODUCTOS**: NO pueden crear productos en `/products`
- ‚ùå **PRODUCTOS**: NO pueden editar productos
- ‚ùå **PRODUCTOS**: NO pueden actualizar stock ni precios
- ‚úÖ **PRODUCTOS**: SOLO pueden VER productos (modo lectura)
- ‚ùå **PRODUCTOS**: NO ven botones de acciones (sin editar, sin actualizar stock/precio)

### Reglas de Relaci√≥n:

#### 1. Usuario ‚Üí Sucursal ‚Üí Clientes

**üî¥ CASO ESPECIAL - ADMINISTRADOR:**
```
admin@zarparuy.com ‚Üí TODAS las sucursales ‚Üí TODAS las tablas de clientes
‚îú‚îÄ clientes_pando
‚îú‚îÄ clientes_maldonado
‚îú‚îÄ clientes_rivera
‚îú‚îÄ clientes_melo
‚îú‚îÄ clientes_paysandu
‚îú‚îÄ clientes_salto
‚îî‚îÄ clientes_tacuarembo
```

**üü¢ CASO NORMAL - USUARIOS POR SUCURSAL (1:1):**
- Cada email est√° asociado a UNA sucursal espec√≠fica
- `pando@zarparuy.com` ‚Üí SOLO puede acceder a sucursal Pando ‚Üí SOLO `clientes_pando`
- `maldonado@zarparuy.com` ‚Üí SOLO puede acceder a sucursal Maldonado ‚Üí SOLO `clientes_maldonado`
- Y as√≠ sucesivamente...

#### 2. Sucursal ‚Üí Clientes (1:N)
- Cada sucursal tiene su PROPIA tabla de clientes
- Los clientes de Pando est√°n en `clientes_pando`
- Los clientes de Maldonado est√°n en `clientes_maldonado`
- **EXCEPCI√ìN**: Admin ve todas las tablas de clientes

#### 3. Sucursal ‚Üí Vendedores (1:N)
- Cada sucursal tiene sus propios vendedores
- Los vendedores est√°n en la tabla `vendedores`
- Filtrados por el campo `sucursal`
- **EXCEPCI√ìN**: Admin puede ver vendedores de todas las sucursales

### Mapeo Autom√°tico (SIEMPRE APLICAR):

```typescript
// Funci√≥n de mapeo que SIEMPRE debes usar
const obtenerTablaClientes = (
  sucursal: string, 
  email?: string
): string | string[] => {
  
  // ‚≠ê CASO ESPECIAL: Administrador puede ver TODAS
  if (email === 'admin@zarparuy.com') {
    return [
      'clientes_pando',
      'clientes_maldonado',
      'clientes_rivera',
      'clientes_melo',
      'clientes_paysandu',
      'clientes_salto',
      'clientes_tacuarembo'
    ];
  }
  
  // üîπ CASO NORMAL: Mapeo por sucursal
  const mapeo = {
    'pando': 'clientes_pando',
    'maldonado': 'clientes_maldonado',
    'rivera': 'clientes_rivera',
    'melo': 'clientes_melo',
    'paysandu': 'clientes_paysandu',
    'salto': 'clientes_salto',
    'tacuarembo': 'clientes_tacuarembo'
  };
  return mapeo[sucursal.toLowerCase()] || 'clientes_pando';
};

// Funci√≥n para verificar si es administrador
const esAdministrador = (email: string): boolean => {
  return email === 'admin@zarparuy.com';
};

// Funci√≥n para verificar permisos de acceso
const tieneAccesoASucursal = (
  email: string, 
  sucursal: string
): boolean => {
  // Admin tiene acceso a todo
  if (esAdministrador(email)) {
    return true;
  }
  
  // Usuario normal solo a su sucursal
  const emailALowerCase = email.toLowerCase();
  const sucursalALowerCase = sucursal.toLowerCase();
  
  return emailALowerCase.startsWith(sucursalALowerCase);
};
```

### Sistema de Login (IMPLEMENTAR EN FUTURO):

```
Usuario se logea ‚Üí Identifica email ‚Üí Verifica si es Admin ‚Üí 
Extrae sucursal o da acceso total ‚Üí Guarda en sesi√≥n ‚Üí 
Filtra datos seg√∫n permisos
```

#### Ejemplo de Flujo NORMAL:
1. Usuario ingresa: `pando@zarparuy.com`
2. Sistema verifica: NO es admin
3. Sistema identifica: Sucursal = "Pando"
4. Sistema carga: `clientes_pando`
5. Usuario SOLO ve clientes de Pando
6. Usuario SOLO ve vendedores de Pando

#### Ejemplo de Flujo ADMINISTRADOR:
1. Usuario ingresa: `admin@zarparuy.com`
2. Sistema verifica: ‚úÖ ES ADMINISTRADOR
3. Sistema da acceso: TODAS las sucursales
4. Sistema carga: TODAS las tablas de clientes
5. Admin ve: Selector de sucursales para filtrar O ver todas juntas
6. Admin ve: TODOS los vendedores de TODAS las sucursales

### ‚ö†Ô∏è IMPORTANTE:
- Cada sucursal es INDEPENDIENTE (excepto para admin)
- NO mezclar datos entre sucursales (excepto admin que puede verlas todas)
- Validar SIEMPRE la sucursal antes de queries
- Proteger rutas por sucursal Y verificar rol
- **SIEMPRE** verificar si el usuario es `admin@zarparuy.com` antes de filtrar
- Si es admin ‚Üí acceso total
- Si NO es admin ‚Üí acceso solo a su sucursal

### üîê L√≥gica de Permisos a Implementar:

```typescript
// En cada endpoint que accede a clientes
const obtenerClientes = async (req, res) => {
  const userEmail = req.user.email; // Del token JWT
  const sucursalSolicitada = req.params.sucursal;
  
  // ‚≠ê Si es admin, permitir acceso a cualquier sucursal
  if (userEmail === 'admin@zarparuy.com') {
    // Admin puede solicitar cualquier sucursal o todas
    if (sucursalSolicitada === 'todas') {
      // Retornar clientes de todas las sucursales
      return await obtenerTodosLosClientes();
    } else {
      // Retornar clientes de la sucursal espec√≠fica
      return await obtenerClientesDeSucursal(sucursalSolicitada);
    }
  }
  
  // üîπ Usuario normal: solo su sucursal
  const sucursalDelUsuario = extraerSucursalDelEmail(userEmail);
  
  // Validar que solo acceda a su sucursal
  if (sucursalSolicitada !== sucursalDelUsuario) {
    return res.status(403).json({ 
      error: 'No tienes permiso para acceder a esta sucursal' 
    });
  }
  
  return await obtenerClientesDeSucursal(sucursalDelUsuario);
};
```

---

## üóÑÔ∏è REGLA #6: OPTIMIZACI√ìN DE BASE DE DATOS

### Filosof√≠a: MENOS es M√ÅS

#### Antes de Crear una Tabla Nueva:
1. ¬øPuedo agregar columnas a una tabla existente? ‚Üí **PREFIERE ESTO**
2. ¬øEs necesario por performance? ‚Üí Considera crear tabla
3. ¬øEs necesario por seguridad? ‚Üí Considera crear tabla
4. ¬øEs necesario por escalabilidad? ‚Üí Considera crear tabla

#### Principios de Dise√±o:

**‚úÖ BUENAS PR√ÅCTICAS:**
- Reutilizar tablas existentes agregando columnas
- Normalizar datos (evitar redundancia)
- Usar √≠ndices en columnas frecuentemente consultadas
- Usar foreign keys para relaciones
- Nombres descriptivos en espa√±ol o ingl√©s consistente

**‚ùå MALAS PR√ÅCTICAS:**
- Crear tabla para cada cosa peque√±a
- Duplicar informaci√≥n
- Tablas con 2-3 columnas cuando pueden estar en otra
- Nombres confusos o inconsistentes

#### Consultar ANTES de:
- Crear nueva tabla
- Modificar estructura existente
- Eliminar columnas con datos

#### Ejemplo de Pensamiento:

```
Usuario pide: "Quiero guardar el color favorito del cliente"

‚ùå MAL: Crear tabla "colores_favoritos"
‚úÖ BIEN: Agregar columna "color_favorito" a tabla de clientes

Usuario pide: "Quiero historial de compras del cliente"

‚ùå MAL: Agregar 100 columnas "compra_1", "compra_2"... 
‚úÖ BIEN: Crear tabla "compras" relacionada con "clientes"
```

---

## üìö REGLA #7: EXPLICAR TODO (ENSE√ëAR)

### Template de Explicaci√≥n:

```markdown
## üîß Lo que hice:
[Descripci√≥n breve en espa√±ol simple]

## ü§î ¬øPor qu√©?
[Raz√≥n t√©cnica explicada de forma simple]

## üìñ ¬øC√≥mo funciona?
[Analog√≠a del mundo real + explicaci√≥n t√©cnica]

## üí° Conceptos que aprendiste:
- Concepto 1: explicaci√≥n
- Concepto 2: explicaci√≥n

## üöÄ Beneficios:
- Beneficio 1
- Beneficio 2

## ‚ö†Ô∏è Cuidados:
[Si hay algo que tener en cuenta]
```

### Ejemplo Real:

```markdown
## üîß Lo que hice:
Agregu√© un useEffect que carga los clientes autom√°ticamente

## ü§î ¬øPor qu√©?
Porque cada vez que cambias de sucursal, necesitas ver los 
clientes diferentes. Sin esto, tendr√≠as que refrescar la p√°gina.

## üìñ ¬øC√≥mo funciona?
Imagina que tienes un sensor de movimiento en tu casa. Cuando 
detecta que entraste, autom√°ticamente enciende las luces. 
useEffect es como ese sensor: detecta cuando cambi√≥ la sucursal 
y autom√°ticamente carga los clientes nuevos.

## üí° Conceptos que aprendiste:
- useEffect: Hook que ejecuta c√≥digo cuando algo cambia
- Dependencies: Lista de cosas que "vigilamos"
- Side Effects: Acciones que afectan fuera del componente

## üöÄ Beneficios:
- Actualizaci√≥n autom√°tica
- Mejor experiencia de usuario
- C√≥digo m√°s limpio y organizado
```

---

## üêõ REGLA #8: CERO BUGS, CERO PROBLEMAS

### Filosof√≠a: "M√°s vale prevenir que lamentar"

#### Antes de Cada Cambio:

**Checklist OBLIGATORIO:**
```
[ ] Le√≠ el c√≥digo existente
[ ] Entend√≠ c√≥mo funciona actualmente
[ ] Identifiqu√© qu√© archivos se afectar√°n
[ ] Verifiqu√© que no hay dependencias ocultas
[ ] Planifiqu√© el cambio sin romper nada
[ ] Tengo un plan B si algo falla
```

#### Despu√©s de Cada Cambio:

**Checklist OBLIGATORIO:**
```
[ ] El c√≥digo compila sin errores
[ ] No hay linter errors
[ ] Prob√© la funcionalidad manualmente (si es posible)
[ ] No romp√≠ ninguna funcionalidad existente
[ ] Agregu√© comentarios explicativos
[ ] Actualic√© tipos de TypeScript si es necesario
```

#### Si Encuentras un Bug:

1. **NO LO IGNORES** - Nunca dejes un bug sin resolver
2. **ANALIZA LA CAUSA RA√çZ** - No solo los s√≠ntomas
3. **PROP√ìN SOLUCI√ìN** - Explica qu√© har√°s
4. **IMPLEMENTA CON CUIDADO** - Sin crear nuevos bugs
5. **VERIFICA TODO** - Asegura que se solucion√≥

#### Prevenci√≥n de Bugs:

**‚úÖ HACER:**
- Validar TODOS los inputs
- Manejar TODOS los casos de error
- Usar try-catch en operaciones async
- Agregar tipos de TypeScript
- Comentar c√≥digo complejo
- Probar casos extremos

**‚ùå NO HACER:**
- Asumir que los datos son correctos
- Ignorar warnings
- Dejar console.log en producci√≥n (algunos s√≠)
- Hacer cambios "r√°pidos" sin pensar
- Copiar c√≥digo sin entender

---

## üé® REGLA #9: INTERFAZ PROFESIONAL Y RESPONSIVE

### Principios de Dise√±o:

#### 1. Responsive 100%
```typescript
// SIEMPRE usar breakpoints de Ant Design
<Row gutter={[16, 16]}>
  <Col xs={24} sm={12} md={8} lg={6} xl={4}>
    {/* Contenido */}
  </Col>
</Row>

// xs: m√≥viles (< 576px) - Full width
// sm: tablets peque√±as (‚â• 576px)
// md: tablets (‚â• 768px)
// lg: desktop (‚â• 992px)
// xl: pantallas grandes (‚â• 1200px)
```

#### 2. Iconos Elegantes (Ant Design Icons)
```typescript
import {
  DashboardOutlined,    // Para dashboard
  UserOutlined,         // Para usuarios
  ShoppingOutlined,     // Para ventas
  DatabaseOutlined,     // Para BD
  // etc... SIEMPRE usar iconos sem√°nticos
} from '@ant-design/icons';
```

#### 3. Animaciones Suaves
```typescript
// En CSS/Inline styles
transition: 'all 0.3s ease'

// Para hover effects
style={{
  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
  transform: hover ? 'translateY(-4px)' : 'translateY(0)',
  boxShadow: hover ? '0 12px 24px rgba(0,0,0,0.15)' : '0 2px 8px rgba(0,0,0,0.1)'
}}
```

#### 4. Efectos Hover Profesionales
```css
.card {
  transition: all 0.3s ease;
  cursor: pointer;
}

.card:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
}

.button:hover {
  transform: scale(1.05);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
}
```

#### 5. Paleta de Colores Consistente
```typescript
const COLORS = {
  primary: '#3b82f6',      // Azul principal
  success: '#10b981',      // Verde √©xito
  warning: '#f59e0b',      // Amarillo advertencia
  danger: '#ef4444',       // Rojo peligro
  info: '#8b5cf6',         // Morado info
  gray: {
    50: '#f9fafb',
    100: '#f3f4f6',
    // ... etc
  }
};
```

#### 6. Loading States Elegantes
```typescript
// SIEMPRE mostrar feedback visual
<Button loading={isLoading} icon={<SaveOutlined />}>
  Guardar
</Button>

<Spin spinning={loading} tip="Cargando datos...">
  {contenido}
</Spin>
```

#### 7. Mensajes y Feedback
```typescript
// Usar el sistema de mensajes de Ant Design
message.success('‚úÖ Operaci√≥n exitosa');
message.error('‚ùå Error al procesar');
message.warning('‚ö†Ô∏è Revisa los datos');
message.info('‚ÑπÔ∏è Informaci√≥n importante');
```

### Componentes que SIEMPRE Deben Ser Responsive:

- ‚úÖ Tablas (scroll horizontal en m√≥vil)
- ‚úÖ Formularios (columna √∫nica en m√≥vil)
- ‚úÖ Cards (grid adaptativo)
- ‚úÖ Modales (full screen en m√≥vil)
- ‚úÖ Sidebars (colapsable en m√≥vil)
- ‚úÖ Estad√≠sticas (stack vertical en m√≥vil)

---

## üîí REGLA #10: SEGURIDAD M√ÅXIMA

### Protecci√≥n Contra SQL Injection:

#### ‚úÖ SIEMPRE Usar Prepared Statements:
```typescript
// ‚úÖ CORRECTO - Par√°metros seguros
const query = 'SELECT * FROM `users` WHERE id = ?';
await pool.execute(query, [userId]);

// ‚úÖ CORRECTO - M√∫ltiples par√°metros
const query = 'INSERT INTO `clientes` (nombre, email) VALUES (?, ?)';
await pool.execute(query, [nombre, email]);

// ‚ùå NUNCA HACER ESTO - Vulnerable a SQL Injection
const query = `SELECT * FROM users WHERE id = ${userId}`;
await pool.execute(query);

// ‚ùå NUNCA HACER ESTO - Concatenaci√≥n directa
const query = `SELECT * FROM users WHERE name = '${userName}'`;
```

#### ‚úÖ SIEMPRE Escapar Nombres de Tabla/Columna:
```typescript
// ‚úÖ CORRECTO - Backticks protegen
const query = `SELECT * FROM \`${tableName}\` WHERE \`${columnName}\` = ?`;

// ‚ùå INCORRECTO - Sin protecci√≥n
const query = `SELECT * FROM ${tableName} WHERE ${columnName} = ?`;
```

### Validaci√≥n de Inputs:

```typescript
// SIEMPRE validar en Backend
const validarCliente = (data: any) => {
  // Validar campos requeridos
  if (!data.nombre || !data.email) {
    throw new Error('Campos requeridos faltantes');
  }
  
  // Validar formato de email
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(data.email)) {
    throw new Error('Email inv√°lido');
  }
  
  // Validar longitud
  if (data.nombre.length > 100) {
    throw new Error('Nombre muy largo');
  }
  
  // Sanitizar (limpiar caracteres peligrosos)
  data.nombre = data.nombre.trim();
  
  return data;
};
```

### Protecci√≥n de Rutas:

```typescript
// Middleware de autenticaci√≥n
const verificarAutenticacion = (req, res, next) => {
  const token = req.headers.authorization;
  
  if (!token) {
    return res.status(401).json({ 
      error: 'No autorizado' 
    });
  }
  
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(403).json({ 
      error: 'Token inv√°lido' 
    });
  }
};

// Aplicar a rutas protegidas
router.get('/clientes', verificarAutenticacion, obtenerClientes);
```

### Variables de Entorno Seguras:

```typescript
// ‚ùå NUNCA hardcodear secretos
const secret = 'mi-password-123';

// ‚úÖ SIEMPRE usar variables de entorno
const secret = process.env.JWT_SECRET;

// ‚úÖ SIEMPRE validar que existan
if (!process.env.JWT_SECRET) {
  throw new Error('JWT_SECRET no est√° configurado');
}
```

### Rate Limiting:

```typescript
// Proteger contra ataques de fuerza bruta
import rateLimit from 'express-rate-limit';

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 100, // m√°ximo 100 requests
  message: 'Demasiadas solicitudes, intenta m√°s tarde'
});

app.use('/api/', limiter);
```

### Sanitizaci√≥n de Datos:

```typescript
// Limpiar datos antes de guardar
const sanitizarInput = (input: string): string => {
  return input
    .trim()                    // Quitar espacios
    .replace(/[<>]/g, '')      // Quitar < >
    .slice(0, 500);            // Limitar longitud
};
```

### Headers de Seguridad:

```typescript
import helmet from 'helmet';

// Agregar headers de seguridad
app.use(helmet());

// Prevenir clickjacking
app.use(helmet.frameguard({ action: 'deny' }));

// Forzar HTTPS
app.use(helmet.hsts({
  maxAge: 31536000,
  includeSubDomains: true
}));
```

---

## üìã CHECKLIST PRE-RESPUESTA

Antes de enviar CUALQUIER respuesta al usuario:

```
[ ] Le√≠ CONTEXTO_AGENTE.md
[ ] Entend√≠ el request del usuario
[ ] Revis√© el c√≥digo existente
[ ] Planifiqu√© sin romper nada
[ ] Consider√© todas las reglas (1-10)
[ ] Prepar√© una explicaci√≥n educativa
[ ] Verifiqu√© seguridad
[ ] Consider√© el rol de admin@zarparuy.com
[ ] Valid√© permisos por sucursal
[ ] NUNCA trato "Administrador" como sucursal
[ ] Filtr√© "Administrador" de listas de sucursales
[ ] Pens√© en responsive
[ ] Todo est√° en espa√±ol
[ ] Tengo una soluci√≥n completa
```

---

## üéØ RESUMEN DE REGLAS

1. ‚úÖ **Base de Datos**: localhost:3307, zarparDataBase, NUNCA cambiar
2. ‚úÖ **Revisar C√≥digo**: SIEMPRE antes de cambiar, NO romper nada
3. ‚úÖ **Espa√±ol**: Todo en espa√±ol, comentarios, mensajes, UI
4. ‚úÖ **Ense√±ar**: Usuario principiante, explicar TODO con ejemplos
5. ‚úÖ **Sucursales**: 7 sucursales f√≠sicas, "Administrador" NO es sucursal
   - üö® **CR√çTICO**: "Administrador" es un ROL, no una sucursal
   - ‚ùå NUNCA incluir "Administrador" en selectores de sucursales
   - ‚úÖ Admin (admin@zarparuy.com) puede ver TODAS las sucursales
6. ‚úÖ **Optimizar BD**: Evitar tablas innecesarias, agregar columnas primero
7. ‚úÖ **Explicar**: Ense√±ar el "por qu√©" y "c√≥mo" con analog√≠as
8. ‚úÖ **Sin Bugs**: Revisar TODO, prevenir problemas, solucionar BIEN
9. ‚úÖ **UI Profesional**: 100% responsive, iconos, animaciones, hover
10. ‚úÖ **Seguridad**: Prepared statements, validaci√≥n, sanitizaci√≥n

---

## üöÄ TECNOLOG√çAS DEL PROYECTO

- **Frontend**: React 18 + TypeScript + Vite + Ant Design 5
- **Backend**: Node.js + Express + TypeScript
- **Base de Datos**: MySQL 8.0
- **Puertos**: Frontend:5678, Backend:3456, MySQL:3307

---

---

## üÜï REGLA #11: GESTI√ìN DE VENDEDORES - ELIMINACI√ìN INTELIGENTE

### üîÑ Sistema Implementado: Hard Delete + Soft Delete Fallback

**IMPORTANTE**: El sistema de eliminaci√≥n de vendedores usa una l√≥gica inteligente que balancea la solicitud del usuario con la integridad de datos.

#### Flujo de Eliminaci√≥n:

```typescript
// 1. Usuario hace clic en "Eliminar" en StaffSellers.tsx
// 2. Frontend muestra advertencia FUERTE de eliminaci√≥n permanente
// 3. Backend intenta HARD DELETE primero
// 4. Si falla por Foreign Key ‚Üí SOFT DELETE autom√°tico
```

#### C√≥digo de Referencia (Backend):

**Archivo**: `api/controllers/vendedoresController.ts`

```typescript
export const eliminarVendedor = async (req, res) => {
  try {
    // Verificar que existe
    const vendedor = await buscarVendedor(id);
    
    // Intentar HARD DELETE primero
    try {
      await executeQuery('DELETE FROM vendedores WHERE id = ?', [id]);
      
      return res.json({
        success: true,
        message: 'Vendedor eliminado permanentemente',
        data: { eliminado_permanentemente: true }
      });
      
    } catch (deleteError) {
      // Si falla por Foreign Key Constraint
      if (deleteError.code === 'ER_ROW_IS_REFERENCED_2' || deleteError.errno === 1451) {
        
        // Fallback a SOFT DELETE
        await executeQuery(
          'UPDATE vendedores SET activo = 0 WHERE id = ?',
          [id]
        );
        
        return res.json({
          success: true,
          message: 'Vendedor desactivado (tiene datos relacionados)',
          data: { 
            eliminado_permanentemente: false,
            desactivado: true 
          }
        });
      }
      throw deleteError;
    }
  } catch (error) {
    // Error general
  }
};
```

#### Frontend - Advertencia Visual:

**Archivo**: `src/pages/staff/StaffSellers.tsx`

```typescript
<Popconfirm
  title="‚ö†Ô∏è ¬°ELIMINAR PERMANENTEMENTE!"
  description={
    <div>
      <p>¬øEst√°s seguro de eliminar a <strong>"{vendedor.nombre}"</strong>?</p>
      <Alert
        message="ADVERTENCIA: Esta acci√≥n es IRREVERSIBLE"
        description="El vendedor ser√° BORRADO PERMANENTEMENTE..."
        type="error"
        showIcon
      />
    </div>
  }
  onConfirm={() => handleEliminarVendedor(id)}
  okText="üóëÔ∏è S√ç, ELIMINAR PERMANENTEMENTE"
  cancelText="‚ùå Cancelar"
/>
```

#### Mensajes de Feedback:

```typescript
// En handleEliminarVendedor (frontend)
if (response.data.data?.eliminado_permanentemente) {
  // ‚úÖ Hard delete exitoso
  messageApi.success('üóëÔ∏è Vendedor eliminado permanentemente');
  
} else if (response.data.data?.desactivado) {
  // ‚ö†Ô∏è Soft delete por Foreign Keys
  messageApi.warning(
    '‚ö†Ô∏è El vendedor tiene datos relacionados y fue desactivado'
  );
}
```

### üîó Foreign Key Constraints Detectadas:

Las siguientes tablas tienen relaciones con `vendedores`:

```sql
clientes_pando         ‚Üí vendedor_id (FK)
clientes_maldonado     ‚Üí vendedor_id (FK)
clientes_rivera        ‚Üí vendedor_id (FK)
clientes_melo          ‚Üí vendedor_id (FK)
clientes_paysandu      ‚Üí vendedor_id (FK)
clientes_salto         ‚Üí vendedor_id (FK)
clientes_tacuarembo    ‚Üí vendedor_id (FK)
```

**TOTAL**: 7 Foreign Keys

### ‚ö†Ô∏è REGLAS PARA FUTUROS CAMBIOS:

1. **NUNCA** forzar eliminaci√≥n con `ON DELETE CASCADE` sin consultar
2. **SIEMPRE** intentar hard delete primero
3. **SIEMPRE** hacer fallback a soft delete si hay relaciones
4. **SIEMPRE** informar al usuario qu√© tipo de eliminaci√≥n ocurri√≥
5. **CONSIDERAR** crear una "papelera de reciclaje" para reactivar vendedores

### üéØ Casos de Uso:

#### Caso 1: Vendedor SIN clientes ni ventas
```
Usuario elimina ‚Üí Backend intenta DELETE ‚Üí ‚úÖ √âxito
Resultado: Vendedor ELIMINADO PERMANENTEMENTE
Mensaje: "üóëÔ∏è Vendedor eliminado permanentemente de la base de datos"
```

#### Caso 2: Vendedor CON clientes o ventas
```
Usuario elimina ‚Üí Backend intenta DELETE ‚Üí ‚ùå Error FK Constraint
‚Üí Backend hace UPDATE activo = 0 ‚Üí ‚úÖ √âxito
Resultado: Vendedor DESACTIVADO (soft delete)
Mensaje: "‚ö†Ô∏è El vendedor tiene clientes o ventas asociadas. 
Se ha DESACTIVADO para preservar el historial."
```

### üîê Seguridad y Permisos:

**Endpoints de Vendedores** (`api/routes/vendedores.ts`):

```typescript
// Todas las operaciones requieren autenticaci√≥n
router.use(verificarAutenticacion);

// Solo admin puede crear/editar/eliminar
router.post('/', verificarAdmin, crearVendedor);
router.put('/:id', verificarAdmin, actualizarVendedor);
router.delete('/:id', verificarAdmin, eliminarVendedor);

// Todos pueden ver (filtrado por sucursal)
router.get('/', obtenerVendedores);
```

### üìä Campos de la Tabla `vendedores`:

```sql
CREATE TABLE vendedores (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  apellido VARCHAR(100) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  telefono VARCHAR(20),
  cargo VARCHAR(50),
  sucursal VARCHAR(50) NOT NULL,
  activo TINYINT(1) DEFAULT 1,  -- ‚ö†Ô∏è Campo para soft delete
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
```

### üí° Mejoras Futuras Sugeridas:

1. **Papelera de Reciclaje**:
   - Vista de vendedores desactivados (activo = 0)
   - Bot√≥n "Reactivar" para restaurar vendedores
   - Bot√≥n "Eliminar permanentemente" desde papelera
   
2. **Historial de Auditor√≠a**:
   - Tabla `vendedores_log` con:
     - Qui√©n elimin√≥/desactiv√≥
     - Cu√°ndo
     - Raz√≥n
   
3. **Verificaci√≥n Preventiva**:
   - Antes de mostrar el modal de eliminaci√≥n
   - Consultar si tiene relaciones
   - Mostrar mensaje diferente seg√∫n el caso

---

## üÜï REGLA #12: SISTEMA DIN√ÅMICO DE SUCURSALES - ESCALABLE Y ROBUSTO

### üéØ FILOSOF√çA: "Crea Una Vez, Funciona Siempre"

**IMPORTANTE**: El sistema est√° dise√±ado para que **CUALQUIER NUEVA SUCURSAL** creada tenga **TODAS** las funcionalidades autom√°ticamente, sin necesidad de modificar c√≥digo.

---

### ‚úÖ CARACTER√çSTICAS DIN√ÅMICAS IMPLEMENTADAS

#### 1. **Carga Din√°mica de Sucursales desde Base de Datos**

Todas las partes del sistema que necesitan listar sucursales **CARGAN DIN√ÅMICAMENTE** desde la base de datos:

```typescript
// ‚ùå ANTES (Hardcodeado)
const SUCURSALES = ['pando', 'maldonado', 'rivera', ...];

// ‚úÖ AHORA (Din√°mico)
const sucursales = await obtenerTodasLasSucursales(); // Desde BD
```

**Archivos Actualizados**:
- ‚úÖ `src/pages/products/Products.tsx` - Carga sucursales din√°micamente
- ‚úÖ `src/pages/pos/POS.tsx` - Carga sucursales din√°micamente
- ‚úÖ `api/controllers/authController.ts` - Tablas de clientes din√°micas
- ‚úÖ `api/middleware/auth.ts` - Permisos din√°micos por sucursal

---

### üì¶ M√ìDULO DE UTILIDADES: `api/utils/database.ts`

**Archivo Central**: `api/utils/database.ts`

Este m√≥dulo contiene funciones helper reutilizables para operaciones din√°micas con la base de datos:

```typescript
/**
 * Obtener TODAS las tablas de clientes din√°micamente
 * Busca en information_schema todas las tablas que empiecen con "clientes_"
 */
export const obtenerTodasLasTablas = async (): Promise<string[]> => {
  // Consulta TODAS las tablas clientes_* desde la BD
  // Retorna: ['clientes_pando', 'clientes_maldonado', 'clientes_soriano', ...]
}

/**
 * Obtener informaci√≥n completa de sucursales
 */
export const obtenerTodasLasSucursales = async (): Promise<SucursalInfo[]> => {
  // Retorna: [
  //   { sucursal: 'pando', tabla_clientes: 'clientes_pando' },
  //   { sucursal: 'soriano', tabla_clientes: 'clientes_soriano' },
  //   ...
  // ]
}

/**
 * Verificar si una tabla de clientes existe
 */
export const tablaClientesExiste = async (nombreSucursal: string): Promise<boolean> => {
  // Verifica din√°micamente si existe clientes_[nombreSucursal]
}

/**
 * Obtener nombres de sucursales (sin prefijo)
 */
export const obtenerNombresSucursales = async (): Promise<string[]> => {
  // Retorna: ['pando', 'maldonado', 'soriano', ...]
}
```

**Ubicaci√≥n**: `api/utils/database.ts`

---

### üîê AUTENTICACI√ìN DIN√ÅMICA

#### Admin - Acceso a TODAS las Sucursales

**Antes** (Hardcodeado):
```typescript
if (esAdmin) {
  tablasClientes = [
    'clientes_pando',
    'clientes_maldonado',
    'clientes_rivera',
    // ... hardcodeado
  ];
}
```

**Ahora** (Din√°mico):
```typescript
if (esAdmin) {
  // Carga TODAS las tablas de clientes desde la BD
  tablasClientes = await obtenerTodasLasTablas();
  // Incluye autom√°ticamente CUALQUIER nueva sucursal creada
}
```

**Beneficio**: Cuando creas "Soriano", el admin AUTOM√ÅTICAMENTE tiene acceso a `clientes_soriano` sin modificar c√≥digo.

---

### üõí PUNTO DE VENTA (POS) - DIN√ÅMICO

**Archivo**: `src/pages/pos/POS.tsx`

```typescript
// Carga sucursales al iniciar
const cargarSucursalesIniciales = async () => {
  const sucursalesData = await vendedoresService.obtenerSucursales();
  setSucursales(sucursalesData);
};

// Efecto inicial
useEffect(() => {
  cargarSucursalesIniciales();
}, []);
```

**Funcionalidad**:
- ‚úÖ Carga sucursales desde API
- ‚úÖ Carga vendedores por sucursal
- ‚úÖ Carga clientes por sucursal
- ‚úÖ TODO din√°mico, nada hardcodeado

---

### üì¶ PRODUCTOS - DIN√ÅMICO

**Archivo**: `src/pages/products/Products.tsx`

```typescript
// Estado din√°mico de sucursales
const [sucursales, setSucursales] = useState<Sucursal[]>([]);

// Cargar sucursales desde API
const cargarSucursales = async () => {
  const response = await fetch(`${API_URL}/sucursales`);
  const data = await response.json();
  setSucursales(data.data);
};

// Efecto inicial
useEffect(() => {
  cargarSucursales();
  cargarProductos();
}, []);
```

**Funcionalidad**:
- ‚úÖ Selector de sucursales din√°mico
- ‚úÖ Actualizar stock/precio por sucursal
- ‚úÖ Bot√≥n "Actualizar" recarga sucursales
- ‚úÖ Colapso de stock por sucursal din√°mico

---

### üè¢ GESTI√ìN DE SUCURSALES - COMPLETO

**Archivo**: `src/pages/staff/StaffSellers.tsx`

#### Crear Nueva Sucursal:
```typescript
const handleCrearSucursal = async (values: any) => {
  // 1. Crea la sucursal en la BD
  // 2. Crea tabla `clientes_[nombre]` autom√°ticamente
  // 3. Crea vendedor inicial para la sucursal
  // 4. LISTO - Ya disponible en TODO el sistema
}
```

**Lo que se crea autom√°ticamente**:
1. ‚úÖ Entrada en sistema de sucursales
2. ‚úÖ Tabla `clientes_[nombre]` con estructura completa
3. ‚úÖ Foreign Keys configuradas correctamente
4. ‚úÖ Vendedor inicial asignado
5. ‚úÖ Disponible en POS, Productos, Auth, etc.

#### Eliminar Sucursal:
```typescript
const handleEliminarSucursal = async (nombre: string) => {
  // 1. Verifica que NO tenga vendedores activos
  // 2. Busca y elimina TODAS las Foreign Keys
  // 3. Elimina tabla de clientes
  // 4. Elimina productos asociados
  // 5. Elimina vendedores inactivos
  // 6. LIMPIEZA COMPLETA - Sin residuos
}
```

**Validaciones**:
- ‚ùå No permite eliminar si tiene vendedores activos
- ‚úÖ Elimina Foreign Keys din√°micamente
- ‚úÖ Limpieza completa de datos relacionados
- ‚úÖ Soluci√≥n robusta, NO temporal

---

### üîÑ FLUJO COMPLETO: CREAR NUEVA SUCURSAL

```
Usuario crea sucursal "Soriano" con vendedor "Sol Pascual"
‚Üì
Backend crea:
  ‚îú‚îÄ Tabla: clientes_soriano (con FK a vendedores)
  ‚îú‚îÄ Vendedor: Sol Pascual (sucursal: soriano)
  ‚îî‚îÄ Entrada en sistema de sucursales
‚Üì
Frontend detecta autom√°ticamente:
  ‚îú‚îÄ POS: "Soriano" aparece en selector
  ‚îú‚îÄ Productos: "Soriano" aparece para asignar stock/precios
  ‚îú‚îÄ Auth: Admin tiene acceso a clientes_soriano
  ‚îî‚îÄ Dashboard: Sucursal visible en estad√≠sticas
‚Üì
‚úÖ LISTO - Funciona como cualquier otra sucursal
NO SE NECESITA MODIFICAR C√ìDIGO
```

---

### üìã CHECKLIST: NUEVA SUCURSAL COMPLETAMENTE FUNCIONAL

Cuando creas una nueva sucursal, autom√°ticamente tiene:

```
‚úÖ Tabla de clientes propia (clientes_[nombre])
‚úÖ Vendedores pueden ser asignados
‚úÖ Aparece en selector de POS
‚úÖ Aparece en selector de Productos
‚úÖ Puede recibir stock y precios de productos
‚úÖ Admin tiene acceso autom√°tico
‚úÖ Vendedores de esa sucursal tienen permisos correctos
‚úÖ Sistema de autenticaci√≥n la reconoce
‚úÖ Puede hacer ventas en POS
‚úÖ Puede gestionar clientes
‚úÖ Visible en estad√≠sticas (cuando se implementen)
```

**TOTAL**: 11/11 funcionalidades ‚úÖ

---

### ‚ö†Ô∏è REGLAS CR√çTICAS PARA MANTENER EL SISTEMA DIN√ÅMICO

#### ‚ùå NUNCA HACER:
1. **NO hardcodear listas de sucursales** en ning√∫n lugar del c√≥digo
2. **NO crear arrays como** `const SUCURSALES = ['pando', 'maldonado', ...]`
3. **NO asumir** que solo existen las 7 sucursales originales
4. **NO usar** bucles con sucursales hardcodeadas

#### ‚úÖ SIEMPRE HACER:
1. **SIEMPRE cargar** sucursales desde la BD usando funciones del m√≥dulo `api/utils/database.ts`
2. **SIEMPRE usar** `obtenerTodasLasTablas()` para obtener tablas de clientes
3. **SIEMPRE verificar** din√°micamente si una tabla existe
4. **SIEMPRE usar** `fetch('/api/sucursales')` en el frontend para listar sucursales
5. **SIEMPRE actualizar** el frontend cuando cambian las sucursales

---

### üîß FUNCIONES A USAR EN CADA CONTEXTO

#### Backend (API):
```typescript
import { 
  obtenerTodasLasTablas,
  obtenerTodasLasSucursales,
  tablaClientesExiste,
  obtenerNombresSucursales
} from '../utils/database.js';

// Para autenticaci√≥n
const tablasClientes = await obtenerTodasLasTablas();

// Para verificar existencia
const existe = await tablaClientesExiste('soriano');

// Para listar sucursales
const sucursales = await obtenerNombresSucursales();
```

#### Frontend (React):
```typescript
// En cualquier componente
const [sucursales, setSucursales] = useState<Sucursal[]>([]);

const cargarSucursales = async () => {
  const response = await fetch(`${API_URL}/sucursales`);
  const data = await response.json();
  setSucursales(data.data);
};

useEffect(() => {
  cargarSucursales();
}, []);

// Usar sucursales en JSX
{sucursales.map(sucursal => (
  <Option key={sucursal.sucursal} value={sucursal.sucursal}>
    {sucursal.sucursal.toUpperCase()}
  </Option>
))}
```

---

### üéØ PRUEBA DE ROBUSTEZ

Para verificar que el sistema es verdaderamente din√°mico:

1. **Crear nueva sucursal** (ej: "Soriano") con vendedor
2. **Refrescar p√°ginas**: POS, Productos, Staff
3. **Verificar que "Soriano" aparece** en TODOS los selectores
4. **Iniciar sesi√≥n** con vendedor de "Soriano"
5. **Hacer venta** en POS con "Soriano"
6. **Asignar productos** con stock/precio para "Soriano"
7. **Eliminar sucursal** y verificar limpieza completa

**Si TODOS los pasos funcionan**: ‚úÖ Sistema robusto y escalable

---

### üì¶ ARCHIVOS CLAVE DE LA SOLUCI√ìN DIN√ÅMICA

```
api/utils/database.ts            # ‚≠ê Funciones helper din√°micas (NUEVO)
api/controllers/authController.ts # ‚≠ê Usa obtenerTodasLasTablas() (ACTUALIZADO)
api/middleware/auth.ts           # ‚≠ê Usa obtenerTodasLasTablas() (ACTUALIZADO)
src/pages/products/Products.tsx  # ‚≠ê Carga sucursales din√°micamente (ACTUALIZADO)
src/pages/pos/POS.tsx           # ‚≠ê Carga sucursales din√°micamente (YA ERA DIN√ÅMICO)
src/pages/staff/StaffSellers.tsx # ‚≠ê Crear/Eliminar sucursales (YA IMPLEMENTADO)
```

---

### üí° BENEFICIOS DE LA SOLUCI√ìN DIN√ÅMICA

1. **Escalabilidad**: Agregar 10, 20, 50 sucursales sin tocar c√≥digo
2. **Mantenibilidad**: Sin listas hardcodeadas que actualizar
3. **Consistencia**: Una sola fuente de verdad (la base de datos)
4. **Flexibilidad**: Sistema se adapta autom√°ticamente a cambios
5. **Productividad**: Crear sucursales en segundos, no horas
6. **Confiabilidad**: Menos puntos de fallo por c√≥digo hardcodeado
7. **Profesionalismo**: Sistema enterprise-grade escalable

---

### üöÄ PR√ìXIMOS PASOS SUGERIDOS

1. **Cache de Sucursales**: Implementar cache en memoria para reducir queries
2. **WebSocket**: Notificar en tiempo real cuando se crea/elimina sucursal
3. **Migraciones**: Sistema de migraciones para cambios en esquema
4. **Auditor√≠a**: Log de creaci√≥n/eliminaci√≥n de sucursales
5. **Backup Autom√°tico**: Antes de eliminar sucursal, backup autom√°tico

---

## üìö ARCHIVOS CR√çTICOS DEL PROYECTO

### Backend (API):
```
api/
‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îî‚îÄ‚îÄ database.ts          # Conexi√≥n MySQL con pool
‚îú‚îÄ‚îÄ controllers/
‚îÇ   ‚îú‚îÄ‚îÄ vendedoresController.ts   # ‚≠ê CRUD de vendedores (eliminaci√≥n inteligente)
‚îÇ   ‚îú‚îÄ‚îÄ clientesController.ts     # Gesti√≥n de clientes
‚îÇ   ‚îî‚îÄ‚îÄ productosController.ts    # Gesti√≥n de productos
‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îú‚îÄ‚îÄ vendedores.ts        # ‚≠ê Rutas de vendedores (protegidas)
‚îÇ   ‚îú‚îÄ‚îÄ clientes.ts          # Rutas de clientes
‚îÇ   ‚îî‚îÄ‚îÄ productos.ts         # Rutas de productos
‚îú‚îÄ‚îÄ middleware/
‚îÇ   ‚îî‚îÄ‚îÄ auth.ts              # verificarAutenticacion, verificarAdmin
‚îî‚îÄ‚îÄ index.ts                 # Servidor Express
```

### Frontend (React):
```
src/
‚îú‚îÄ‚îÄ pages/
‚îÇ   ‚îú‚îÄ‚îÄ staff/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ StaffSellers.tsx      # ‚≠ê Gesti√≥n de vendedores (con eliminaci√≥n)
‚îÇ   ‚îú‚îÄ‚îÄ admin/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ DatabaseManager.tsx   # Administrador de BD
‚îÇ   ‚îî‚îÄ‚îÄ pos/
‚îÇ       ‚îî‚îÄ‚îÄ POS.tsx              # Punto de venta
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îî‚îÄ‚îÄ api.ts               # ‚≠ê Servicios API (vendedoresService)
‚îî‚îÄ‚îÄ App.tsx                  # Router principal
```

### Base de Datos:
```
database/
‚îú‚îÄ‚îÄ backup_completo.sql              # ‚≠ê Backup principal (USAR ESTE)
‚îú‚îÄ‚îÄ backup_completo_20251031_*.sql   # Backups con timestamp
‚îî‚îÄ‚îÄ schema.sql                       # Esquema de tablas
```

---

**√öltima actualizaci√≥n**: Octubre 31, 2025  
**Versi√≥n**: 2.0.0  
**Estado**: ACTIVO - LEER SIEMPRE

---

## üìÑ CHANGELOG

### Versi√≥n 2.1.0 - 31 de Octubre, 2025 (Actualizaci√≥n Mayor)
- ‚úÖ **SISTEMA DIN√ÅMICO Y ESCALABLE DE SUCURSALES**
- ‚úÖ M√≥dulo de utilidades `api/utils/database.ts` con funciones helpers
- ‚úÖ Autenticaci√≥n din√°mica - Admin accede a TODAS las sucursales autom√°ticamente
- ‚úÖ Frontend de Productos carga sucursales din√°micamente
- ‚úÖ Eliminadas TODAS las listas hardcodeadas de sucursales
- ‚úÖ Cualquier nueva sucursal tiene TODAS las funcionalidades autom√°ticamente
- ‚úÖ Sistema robusto de eliminaci√≥n de sucursales con limpieza completa
- ‚úÖ Documentaci√≥n completa de la soluci√≥n din√°mica

### Versi√≥n 2.0.0 - 31 de Octubre, 2025
- ‚úÖ Implementado sistema de eliminaci√≥n inteligente de vendedores
- ‚úÖ Hard delete con fallback a soft delete por Foreign Keys
- ‚úÖ UI mejorada con advertencias visuales fuertes
- ‚úÖ Mensajes descriptivos seg√∫n tipo de eliminaci√≥n
- ‚úÖ An√°lisis completo de Foreign Key Constraints
- ‚úÖ Documentaci√≥n actualizada (CHANGELOG.md)
- ‚úÖ Backup completo de base de datos

### Versi√≥n 1.0.0 - 28 de Octubre, 2025
- ‚úÖ Sistema base de sucursales y vendedores
- ‚úÖ Autenticaci√≥n JWT
- ‚úÖ Permisos por rol (admin vs sucursal)
- ‚úÖ Docker MySQL configurado
- ‚úÖ Frontend React + TypeScript + Ant Design
- ‚úÖ Backend Express + TypeScript
